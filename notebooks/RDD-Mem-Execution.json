{"paragraphs":[{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1487456224733_-1880050817","id":"20170218-141704_979458167","dateCreated":"2017-02-18T14:17:04-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:12434","text":"%md # RDDs, Spark Memory, and Execution\n\n&copy;2016, 2017 by Adam Breindel. All Rights Reserved.","dateUpdated":"2017-02-18T14:17:24-0800","dateFinished":"2017-02-18T14:17:24-0800","dateStarted":"2017-02-18T14:17:24-0800","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>RDDs, Spark Memory, and Execution</h1>\n<p>&copy;2016, 2017 by Adam Breindel. All Rights Reserved.</p>\n</div>"}]}},{"text":"%md #### Resilient Distributed Datasets (RDDs)\n\n* Purpose / motivation\n* Implementation in Spark\n* https://www.usenix.org/system/files/conference/nsdi12/nsdi12-final138.pdf\n    * 2014 ACM Doctoral Dissertation Award (Matei Zaharia, Spark creator, Databricks cofounder)","user":"anonymous","dateUpdated":"2017-02-18T14:17:49-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1487456227626_49464917","id":"20170218-141707_1646601151","dateCreated":"2017-02-18T14:17:07-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:12494","dateFinished":"2017-02-18T14:17:49-0800","dateStarted":"2017-02-18T14:17:49-0800","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>Resilient Distributed Datasets (RDDs)</h4>\n<ul>\n  <li>Purpose / motivation</li>\n  <li>Implementation in Spark</li>\n  <li><a href=\"https://www.usenix.org/system/files/conference/nsdi12/nsdi12-final138.pdf\">https://www.usenix.org/system/files/conference/nsdi12/nsdi12-final138.pdf</a>\n    <ul>\n      <li>2014 ACM Doctoral Dissertation Award (Matei Zaharia, Spark creator, Databricks cofounder)</li>\n    </ul>\n  </li>\n</ul>\n</div>"}]}},{"text":"%md #### Why a \"new\" computation approach?\n\nLots of existing cluster computing models. Goal is to exploit availability of large amounts of RAM.\n\nChallenge: treating a cluster a large pool of memory and putting objects in it is not a new idea, but it is prone to many difficulties which have expensive mitigations.","user":"anonymous","dateUpdated":"2017-02-18T14:17:59-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1487456261920_-1371550689","id":"20170218-141741_1098885690","dateCreated":"2017-02-18T14:17:41-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:12613","dateFinished":"2017-02-18T14:17:59-0800","dateStarted":"2017-02-18T14:17:59-0800","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>Why a &ldquo;new&rdquo; computation approach?</h4>\n<p>Lots of existing cluster computing models. Goal is to exploit availability of large amounts of RAM.</p>\n<p>Challenge: treating a cluster a large pool of memory and putting objects in it is not a new idea, but it is prone to many difficulties which have expensive mitigations.</p>\n</div>"}]}},{"text":"%md #### Distributed computation = concurrent computation + guaranteed failures\n\nWe can simplify distributed computation by addressing both of these elements:\n\n* Functional programming model for concurrency\n* Metadata for reliability (but __not__ for concurrency)","user":"anonymous","dateUpdated":"2017-02-18T14:18:17-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1487456279207_2046204439","id":"20170218-141759_470456622","dateCreated":"2017-02-18T14:17:59-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:12705","dateFinished":"2017-02-18T14:18:17-0800","dateStarted":"2017-02-18T14:18:17-0800","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>Distributed computation = concurrent computation + guaranteed failures</h4>\n<p>We can simplify distributed computation by addressing both of these elements:</p>\n<ul>\n  <li>Functional programming model for concurrency</li>\n  <li>Metadata for reliability (but <strong>not</strong> for concurrency)</li>\n</ul>\n</div>"}]}},{"text":"%md Most of the big data world is (was) on Java-based tools (e.g., Hadoop); Scala provides a functional language with direct Java interop.\n\n*Let's look at Scala collections* -- can we make something that looks/behaves like Scala collections but transparently operates at cluster scale?","user":"anonymous","dateUpdated":"2017-02-18T14:18:30-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1487456291055_-1369196223","id":"20170218-141811_706327086","dateCreated":"2017-02-18T14:18:11-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:12779","dateFinished":"2017-02-18T14:18:30-0800","dateStarted":"2017-02-18T14:18:30-0800","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Most of the big data world is (was) on Java-based tools (e.g., Hadoop); Scala provides a functional language with direct Java interop.</p>\n<p><em>Let&rsquo;s look at Scala collections</em> &ndash; can we make something that looks/behaves like Scala collections but transparently operates at cluster scale?</p>\n</div>"}]}},{"text":"%md Here's some Scala (note this is __not__ Spark code, just plain Scala ... <br/> it's also not a new or peculiar to Scala ... Java 8, C#, JavaScript, and other languages have had these patterns for a very long time)","user":"anonymous","dateUpdated":"2017-02-18T14:19:07-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1487456310255_496682701","id":"20170218-141830_1787067081","dateCreated":"2017-02-18T14:18:30-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:12871","dateFinished":"2017-02-18T14:19:07-0800","dateStarted":"2017-02-18T14:19:07-0800","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Here&rsquo;s some Scala (note this is <strong>not</strong> Spark code, just plain Scala &hellip; <br/> it&rsquo;s also not a new or peculiar to Scala &hellip; Java 8, C#, JavaScript, and other languages have had these patterns for a very long time)</p>\n</div>"}]}},{"text":"// Basic Scala (functional) collections, 1 thread\n\nval list = List(\"Apples\", \"bananas\", \"APPLES\", \"pears\", \"Bananas\")","user":"anonymous","dateUpdated":"2017-02-18T14:19:41-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":false,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1487456322125_1070758708","id":"20170218-141842_1092216808","dateCreated":"2017-02-18T14:18:42-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:12945","dateFinished":"2017-02-18T14:19:38-0800","dateStarted":"2017-02-18T14:19:21-0800","errorMessage":""},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1487456361493_-745994950","id":"20170218-141921_1948918755","dateCreated":"2017-02-18T14:19:21-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:13037","text":"list.map(_.toUpperCase) // transform each element","dateUpdated":"2017-02-18T14:19:37-0800","dateFinished":"2017-02-18T14:19:38-0800","dateStarted":"2017-02-18T14:19:37-0800","errorMessage":""},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1487456377466_590084738","id":"20170218-141937_534808141","dateCreated":"2017-02-18T14:19:37-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:13107","text":"list.groupBy(word => word.toLowerCase).mapValues(_.size) // group and count","dateUpdated":"2017-02-18T14:20:03-0800","dateFinished":"2017-02-18T14:20:03-0800","dateStarted":"2017-02-18T14:20:03-0800","errorMessage":""},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1487456403380_-496415507","id":"20170218-142003_1490913215","dateCreated":"2017-02-18T14:20:03-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:13231","text":"%md Since this approach avoids side effects and does not require the user (programmer) to manage any state<br/> (e.g., position in a collection, or partial aggregation totals), it's easy to provide a declarative parallel API:","dateUpdated":"2017-02-18T14:20:31-0800","dateFinished":"2017-02-18T14:20:31-0800","dateStarted":"2017-02-18T14:20:31-0800","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Since this approach avoids side effects and does not require the user (programmer) to manage any state<br/> (e.g., position in a collection, or partial aggregation totals), it&rsquo;s easy to provide a declarative parallel API:</p>\n</div>"}]}},{"text":"val parList = List(\"Apples\", \"bananas\", \"APPLES\", \"pears\", \"Bananas\").par\nparList.filter(_ contains \"p\")","user":"anonymous","dateUpdated":"2017-02-18T14:20:44-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":false,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1487456415709_198086906","id":"20170218-142015_332548807","dateCreated":"2017-02-18T14:20:15-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:13313","dateFinished":"2017-02-18T14:20:25-0800","dateStarted":"2017-02-18T14:20:24-0800","errorMessage":""},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1487456424524_-1925342274","id":"20170218-142024_954601551","dateCreated":"2017-02-18T14:20:24-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:13387","text":"%md Look, ma! No [visible] threads! ... Of course underneath there are threads or processes or coroutines or <br/>some other mechanism for the actual parallelism. Scala uses regular JVM threads. This is similar to the Java 8 Streams API using the default Fork-Join threadpool.","dateUpdated":"2017-02-18T14:21:12-0800","dateFinished":"2017-02-18T14:21:12-0800","dateStarted":"2017-02-18T14:21:12-0800","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Look, ma! No [visible] threads! &hellip; Of course underneath there are threads or processes or coroutines or <br/>some other mechanism for the actual parallelism. Scala uses regular JVM threads. This is similar to the Java 8 Streams API using the default Fork-Join threadpool.</p>\n</div>"}]}},{"text":"var parList = (1 to 100).par\nparList.sum","user":"anonymous","dateUpdated":"2017-02-18T14:21:25-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":false,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1487456450211_-365945115","id":"20170218-142050_1856554206","dateCreated":"2017-02-18T14:20:50-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:13503","dateFinished":"2017-02-18T14:21:23-0800","dateStarted":"2017-02-18T14:21:22-0800","errorMessage":""},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1487456482626_145816895","id":"20170218-142122_165808736","dateCreated":"2017-02-18T14:21:22-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:13606","text":"%md Now let's take a look at how the Spark RDD API exposes similar functionality with similar syntax:","dateUpdated":"2017-02-18T14:21:41-0800","dateFinished":"2017-02-18T14:21:41-0800","dateStarted":"2017-02-18T14:21:41-0800","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Now let&rsquo;s take a look at how the Spark RDD API exposes similar functionality with similar syntax:</p>\n</div>"}]}},{"text":"val rdd = sc.parallelize(1 to 100)\nrdd.sum","user":"anonymous","dateUpdated":"2017-02-18T14:21:56-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":false,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1487456501273_-1343915522","id":"20170218-142141_1420349546","dateCreated":"2017-02-18T14:21:41-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:13711","dateFinished":"2017-02-18T14:21:53-0800","dateStarted":"2017-02-18T14:21:52-0800","errorMessage":""},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1487456512297_-1072436040","id":"20170218-142152_1858774990","dateCreated":"2017-02-18T14:21:52-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:13785","text":"val rdd = sc.parallelize(List(\"Apples\", \"bananas\", \"APPLES\", \"pears\", \"Bananas\"))\nrdd.map(_.toUpperCase).collect","dateUpdated":"2017-02-18T14:22:11-0800","dateFinished":"2017-02-18T14:22:12-0800","dateStarted":"2017-02-18T14:22:11-0800","errorMessage":""},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1487456531833_1589287499","id":"20170218-142211_2038460759","dateCreated":"2017-02-18T14:22:11-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:13882","text":"rdd.groupBy(word => word.toLowerCase).mapValues(_.size).collect","dateUpdated":"2017-02-18T14:22:30-0800","dateFinished":"2017-02-18T14:22:31-0800","dateStarted":"2017-02-18T14:22:30-0800","errorMessage":""},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1487456550356_431978132","id":"20170218-142230_1012834600","dateCreated":"2017-02-18T14:22:30-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:13969","text":"%md Those functional patterns help with concurrency ... but what about resiliency? \n\nI.e., how is this different from putting Scala collections in raw memory somewhere <br/>(e.g., via RMI)? How can we fix things if (when!) we lose a node and all the data that was in RAM?\n\nWhat if we had a minimal metadata object that describes, deterministically, which how the dataset is distributed, <br/>and how one step of the computation is derived from the parent.","dateUpdated":"2017-02-18T14:23:13-0800","dateFinished":"2017-02-18T14:23:13-0800","dateStarted":"2017-02-18T14:23:13-0800","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Those functional patterns help with concurrency &hellip; but what about resiliency? </p>\n<p>I.e., how is this different from putting Scala collections in raw memory somewhere <br/>(e.g., via RMI)? How can we fix things if (when!) we lose a node and all the data that was in RAM?</p>\n<p>What if we had a minimal metadata object that describes, deterministically, which how the dataset is distributed, <br/>and how one step of the computation is derived from the parent.</p>\n</div>"}]}},{"text":"%md #### Computation as a DAG\n\n<img width=\"400\" src=\"http://i.imgur.com/fQG6K3t.png\"></img>","user":"anonymous","dateUpdated":"2017-02-18T14:23:40-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1487456574643_-1627735972","id":"20170218-142254_642582143","dateCreated":"2017-02-18T14:22:54-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:14053","dateFinished":"2017-02-18T14:23:40-0800","dateStarted":"2017-02-18T14:23:40-0800","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>Computation as a DAG</h4>\n<img width=\"400\" src=\"http://i.imgur.com/fQG6K3t.png\"></img>\n</div>"}]}},{"text":"%md Each RDD is a small piece of metadata describing a step of the computation\n\n* Parent(s)\n* Partitions\n* Compute\n* (Locality Preference)","user":"anonymous","dateUpdated":"2017-02-18T14:24:08-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1487456608650_-2075137646","id":"20170218-142328_417388631","dateCreated":"2017-02-18T14:23:28-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:14162","dateFinished":"2017-02-18T14:24:08-0800","dateStarted":"2017-02-18T14:24:08-0800","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Each RDD is a small piece of metadata describing a step of the computation</p>\n<ul>\n  <li>Parent(s)</li>\n  <li>Partitions</li>\n  <li>Compute</li>\n  <li>(Locality Preference)</li>\n</ul>\n</div>"}]}},{"text":"val rdd = sc.parallelize(List(\"Apples\", \"bananas\", \"APPLES\", \"pears\", \"Bananas\"))\n\nprintln(\"total partitions: \" + rdd.getNumPartitions) // how many? why?\n\nrdd.dependencies // this is the source/root RDD","user":"anonymous","dateUpdated":"2017-02-18T14:25:35-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":false,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1487456641651_1014658177","id":"20170218-142401_1594891979","dateCreated":"2017-02-18T14:24:01-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:14254","dateFinished":"2017-02-18T14:25:00-0800","dateStarted":"2017-02-18T14:24:59-0800","errorMessage":""},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1487456670377_1788803612","id":"20170218-142430_982285224","dateCreated":"2017-02-18T14:24:30-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:14346","text":"val nextRDD = rdd.map(_.toLowerCase)\n\nnextRDD.dependencies(0) // nextRDD depends on its parent (rdd) ... and the partitions have a 1:1 dependency\n\n// https://github.com/apache/spark/blob/v2.0.0/core/src/main/scala/org/apache/spark/Dependency.scala\n","dateUpdated":"2017-02-18T14:25:11-0800","dateFinished":"2017-02-18T14:25:11-0800","dateStarted":"2017-02-18T14:25:11-0800","errorMessage":""},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1487456711146_-1779160117","id":"20170218-142511_607280323","dateCreated":"2017-02-18T14:25:11-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:14486","text":"nextRDD.dependencies(0).rdd ","dateUpdated":"2017-02-18T14:25:27-0800","dateFinished":"2017-02-18T14:25:28-0800","dateStarted":"2017-02-18T14:25:27-0800","errorMessage":""},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1487456727975_335835235","id":"20170218-142527_1231240247","dateCreated":"2017-02-18T14:25:27-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:14567","text":"%md Let's grab a dataset and do some simple counting. The goal is to understand how Spark executes our jobs!","dateUpdated":"2017-02-18T14:30:15-0800","dateFinished":"2017-02-18T14:30:15-0800","dateStarted":"2017-02-18T14:30:15-0800","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Let&rsquo;s grab a dataset and do some simple counting. The goal is to understand how Spark executes our jobs!</p>\n</div>"}]}},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1487456971497_-644167831","id":"20170218-142931_25680823","dateCreated":"2017-02-18T14:29:31-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:14681","text":"val rdd1 = sc.textFile(\"data/pageviews-20170120-180000\")","dateUpdated":"2017-02-18T15:16:06-0800","dateFinished":"2017-02-18T15:16:06-0800","dateStarted":"2017-02-18T15:16:06-0800","errorMessage":""},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1487457128904_-1523472309","id":"20170218-143208_1602192883","dateCreated":"2017-02-18T14:32:08-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:14768","text":"rdd1.take(5)","dateUpdated":"2017-02-18T14:32:19-0800","dateFinished":"2017-02-18T14:32:19-0800","dateStarted":"2017-02-18T14:32:19-0800","errorMessage":""},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1487457139688_198294343","id":"20170218-143219_1089890362","dateCreated":"2017-02-18T14:32:19-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:14849","text":"rdd1.partitions.size","dateUpdated":"2017-02-18T14:32:30-0800","dateFinished":"2017-02-18T14:32:30-0800","dateStarted":"2017-02-18T14:32:30-0800","errorMessage":""},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1487457150360_-33293847","id":"20170218-143230_2112261355","dateCreated":"2017-02-18T14:32:30-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:14930","text":"rdd1.count","dateUpdated":"2017-02-18T14:32:37-0800","dateFinished":"2017-02-18T14:32:38-0800","dateStarted":"2017-02-18T14:32:37-0800","errorMessage":""},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1487457157527_395917360","id":"20170218-143237_1022270964","dateCreated":"2017-02-18T14:32:37-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:15011","text":"%md What is the parallelism of that job? Why?","dateUpdated":"2017-02-18T14:33:35-0800","dateFinished":"2017-02-18T14:33:35-0800","dateStarted":"2017-02-18T14:33:35-0800","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>What is the parallelism of that job? Why?</p>\n</div>"}]}},{"text":"rdd1.take(10) // Let's just have a look\n","user":"anonymous","dateUpdated":"2017-02-18T14:35:07-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":true},"editorMode":"ace/mode/scala","editorHide":false,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1487457215162_-501240454","id":"20170218-143335_99968549","dateCreated":"2017-02-18T14:33:35-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:15101","dateFinished":"2017-02-18T14:33:52-0800","dateStarted":"2017-02-18T14:33:52-0800","errorMessage":""},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1487457232162_668578448","id":"20170218-143352_1644408352","dateCreated":"2017-02-18T14:33:52-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:15175","text":"%md Why only one task?","dateUpdated":"2017-02-18T14:34:05-0800","dateFinished":"2017-02-18T14:34:05-0800","dateStarted":"2017-02-18T14:34:05-0800","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Why only one task?</p>\n</div>"}]}},{"text":"%md #### Caching RDDs\n\n* Options for serialization, local disk cache, replication, etc.\n* Caching, like computation, is always at the granularity of partitions! \n  * Why? That's the level of detail about which we have metadata for recovery!\n\nLet's start with basic memory-only caching of raw Java/Scala objects:\n","user":"anonymous","dateUpdated":"2017-02-18T14:34:57-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1487457245785_-31279802","id":"20170218-143405_788450771","dateCreated":"2017-02-18T14:34:05-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:15265","dateFinished":"2017-02-18T14:34:57-0800","dateStarted":"2017-02-18T14:34:57-0800","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>Caching RDDs</h4>\n<ul>\n  <li>Options for serialization, local disk cache, replication, etc.</li>\n  <li>Caching, like computation, is always at the granularity of partitions!</li>\n  <li>Why? That&rsquo;s the level of detail about which we have metadata for recovery!</li>\n</ul>\n<p>Let&rsquo;s start with basic memory-only caching of raw Java/Scala objects:</p>\n</div>"}]}},{"text":"val enPagesRDD = rdd1.map(_.split(\" \"))\n                    .filter(fields => fields(0) == \"en\" && fields(1) >= \"A\")\n                    .map(_(1))\n                    \nenPagesRDD.take(10)","user":"anonymous","dateUpdated":"2017-02-18T15:17:05-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":true},"editorMode":"ace/mode/scala","editorHide":false,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1487457324168_-4793424","id":"20170218-143524_1781944258","dateCreated":"2017-02-18T14:35:24-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:15548","dateFinished":"2017-02-18T15:16:58-0800","dateStarted":"2017-02-18T15:16:56-0800","errorMessage":""},{"text":"import org.apache.spark.storage.StorageLevel._\n\nenPagesRDD.setName(\"EN Pages\").cache.count","user":"anonymous","dateUpdated":"2017-02-18T14:40:31-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":true},"editorMode":"ace/mode/scala","editorHide":false,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1487457291132_-68322965","id":"20170218-143451_119496874","dateCreated":"2017-02-18T14:34:51-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:15339","dateFinished":"2017-02-18T14:40:28-0800","dateStarted":"2017-02-18T14:40:28-0800","errorMessage":""},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1487457305899_1253320155","id":"20170218-143505_809242403","dateCreated":"2017-02-18T14:35:05-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:15431","text":"enPagesRDD.map(identity).setName(\"EN Pages - SER\").persist(MEMORY_ONLY_SER).count // why map? try it without the map call!","dateUpdated":"2017-02-18T14:40:56-0800","dateFinished":"2017-02-18T14:40:56-0800","dateStarted":"2017-02-18T14:40:56-0800","errorMessage":""},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1487457656109_-447191195","id":"20170218-144056_1064605137","dateCreated":"2017-02-18T14:40:56-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:16027","text":"enPagesRDD.toDF.cache.count","dateUpdated":"2017-02-18T14:41:24-0800","dateFinished":"2017-02-18T14:41:27-0800","dateStarted":"2017-02-18T14:41:24-0800","errorMessage":""},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1487457684628_1412177646","id":"20170218-144124_75907407","dateCreated":"2017-02-18T14:41:24-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:16116","text":"%md RDD caching defaults to MEMORY\\_ONLY\n\ni.e., `myRDD.cache` is the same as `myRDD.persist(MEMORY_ONLY)`\n\n* Additional storage levels may be useful in special circumstances\n* http://spark.apache.org/docs/latest/programming-guide.html#rdd-persistence\n\nNote that\n1. DataFrame/Dataset default `.cache` as `persist(MEMORY_AND_DISK)` because the compressed encoded columnar cache is expensive to rebuild\n2. Some streaming sources default to stronger caching (e.g., `MEMORY_AND_DISK_SER_2`)\n\n`rdd.unpersist()` or `dataset.unpersist()` -- immediately remove from cache","dateUpdated":"2017-02-18T14:42:20-0800","dateFinished":"2017-02-18T14:42:20-0800","dateStarted":"2017-02-18T14:42:20-0800","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>RDD caching defaults to MEMORY_ONLY</p>\n<p>i.e., <code>myRDD.cache</code> is the same as <code>myRDD.persist(MEMORY_ONLY)</code></p>\n<ul>\n  <li>Additional storage levels may be useful in special circumstances</li>\n  <li><a href=\"http://spark.apache.org/docs/latest/programming-guide.html#rdd-persistence\">http://spark.apache.org/docs/latest/programming-guide.html#rdd-persistence</a></li>\n</ul>\n<p>Note that<br/>1. DataFrame/Dataset default <code>.cache</code> as <code>persist(MEMORY_AND_DISK)</code> because the compressed encoded columnar cache is expensive to rebuild<br/>2. Some streaming sources default to stronger caching (e.g., <code>MEMORY_AND_DISK_SER_2</code>)</p>\n<p><code>rdd.unpersist()</code> or <code>dataset.unpersist()</code> &ndash; immediately remove from cache</p>\n</div>"}]}},{"text":"%md Where does this memory pool fit into the executors (JVMs)? How does Spark allocate memory?\n\n<img width=\"400\" src=\"http://i.imgur.com/Di2SDiG.png\"/>\n\nhttps://0x0fff.com/spark-memory-management/\n\nNote: these percentages are 1.6; they are slightly different in 2.x but the overall behavior is the same\n\nCache Eviction is due to\n\n* Least-recently-used (LRU) when space is needed for caching other data (per programmer requests)\n* or Spark needing memory for shuffle/execution","user":"anonymous","dateUpdated":"2017-02-18T14:43:38-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1487457706060_69434633","id":"20170218-144146_1016781747","dateCreated":"2017-02-18T14:41:46-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:16203","dateFinished":"2017-02-18T14:43:38-0800","dateStarted":"2017-02-18T14:43:38-0800","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Where does this memory pool fit into the executors (JVMs)? How does Spark allocate memory?</p>\n<img width=\"400\" src=\"http://i.imgur.com/Di2SDiG.png\"/>\n<p><a href=\"https://0x0fff.com/spark-memory-management/\">https://0x0fff.com/spark-memory-management/</a></p>\n<p>Note: these percentages are 1.6; they are slightly different in 2.x but the overall behavior is the same</p>\n<p>Cache Eviction is due to</p>\n<ul>\n  <li>Least-recently-used (LRU) when space is needed for caching other data (per programmer requests)</li>\n  <li>or Spark needing memory for shuffle/execution</li>\n</ul>\n</div>"}]}},{"text":"%md ### RDD Job Execution In-Depth\n\n* Application\n* Job \n* Stage\n* Task\n","user":"anonymous","dateUpdated":"2017-02-18T15:05:54-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1487457748411_298573123","id":"20170218-144228_699818721","dateCreated":"2017-02-18T14:42:28-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:16363","dateFinished":"2017-02-18T15:05:54-0800","dateStarted":"2017-02-18T15:05:54-0800","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>RDD Job Execution In-Depth</h3>\n<ul>\n  <li>Application</li>\n  <li>Job</li>\n  <li>Stage</li>\n  <li>Task</li>\n</ul>\n</div>"}]}},{"text":"%md <img src=\"http://i.imgur.com/Uqo6FJM.png\" width=\"500\"/>","user":"anonymous","dateUpdated":"2017-02-18T15:07:25-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1487459154080_-829890468","id":"20170218-150554_1502543511","dateCreated":"2017-02-18T15:05:54-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:16557","dateFinished":"2017-02-18T15:07:25-0800","dateStarted":"2017-02-18T15:07:25-0800","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<img src=\"http://i.imgur.com/Uqo6FJM.png\" width=\"500\"/>\n</div>"}]}},{"text":"enPagesRDD.sample(false, 0.02).flatMap(t => t.split(\"_\")).collect // let's see ... any shuffles? ... Pipelining!","user":"anonymous","dateUpdated":"2017-02-18T15:20:42-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":true},"editorMode":"ace/mode/scala","editorHide":false,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1487459245412_1673624653","id":"20170218-150725_34689135","dateCreated":"2017-02-18T15:07:25-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:16656","dateFinished":"2017-02-18T15:20:37-0800","dateStarted":"2017-02-18T15:20:36-0800","errorMessage":""},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1487459278742_737392661","id":"20170218-150758_1869341889","dateCreated":"2017-02-18T15:07:58-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:16730","text":"val smallPages = enPagesRDD.sample(false, 0.02).flatMap(t => t.split(\"_\")) // look for shuffles ... also notice sample does not affect ordering\nsmallPages.repartition(8).collect","dateUpdated":"2017-02-18T15:27:36-0800","dateFinished":"2017-02-18T15:27:38-0800","dateStarted":"2017-02-18T15:27:36-0800","errorMessage":""},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1487459950982_2143216404","id":"20170218-151910_1317123353","dateCreated":"2017-02-18T15:19:10-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:20588","text":"%md <img src=\"http://i.imgur.com/2UuGJve.jpg\" width=\"800\"/>","dateUpdated":"2017-02-18T15:19:13-0800","dateFinished":"2017-02-18T15:19:13-0800","dateStarted":"2017-02-18T15:19:13-0800","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<img src=\"http://i.imgur.com/2UuGJve.jpg\" width=\"800\"/>\n</div>"}]}},{"text":"smallPages.getNumPartitions","user":"anonymous","dateUpdated":"2017-02-18T15:29:04-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":true},"editorMode":"ace/mode/scala","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1487460533483_58105584","id":"20170218-152853_1052909922","dateCreated":"2017-02-18T15:28:53-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:21668","dateFinished":"2017-02-18T15:29:04-0800","dateStarted":"2017-02-18T15:29:04-0800","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nres18: Int = 7\n"}]}},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1487459910013_638402159","id":"20170218-151830_1768269158","dateCreated":"2017-02-18T15:18:30-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:20501","text":"smallPages.map(w => (w, 1)).collect","dateUpdated":"2017-02-18T15:27:58-0800","dateFinished":"2017-02-18T15:27:59-0800","dateStarted":"2017-02-18T15:27:58-0800","errorMessage":""},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1487460020637_-1128795511","id":"20170218-152020_50164686","dateCreated":"2017-02-18T15:20:20-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:20663","text":"%md And, finally, to add up the word occurrences, we'll reduceByKey","dateUpdated":"2017-02-18T15:22:28-0800","dateFinished":"2017-02-18T15:22:28-0800","dateStarted":"2017-02-18T15:22:28-0800","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>And, finally, to add up the word occurrences, we&rsquo;ll reduceByKey</p>\n</div>"}]}},{"text":"smallPages.map(w => (w, 1)).reduceByKey(_ + _).collect","user":"anonymous","dateUpdated":"2017-02-18T15:29:20-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":false,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1487460148308_61784507","id":"20170218-152228_1493969637","dateCreated":"2017-02-18T15:22:28-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:20940","dateFinished":"2017-02-18T15:29:10-0800","dateStarted":"2017-02-18T15:29:09-0800","errorMessage":""},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1487460170178_954802028","id":"20170218-152250_1922869985","dateCreated":"2017-02-18T15:22:50-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:21014","text":"%md What does it look like if we increase parallelism in that last stage?","dateUpdated":"2017-02-18T15:23:16-0800","dateFinished":"2017-02-18T15:23:16-0800","dateStarted":"2017-02-18T15:23:16-0800","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>What does it look like if we increase parallelism in that last stage?</p>\n</div>"}]}},{"text":"smallPages.map(w => (w, 1)).reduceByKey(_ + _, 32).collect","user":"anonymous","dateUpdated":"2017-02-18T15:34:50-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":true},"editorMode":"ace/mode/scala","editorHide":false,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1487460196555_1951563835","id":"20170218-152316_1335332108","dateCreated":"2017-02-18T15:23:16-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:21122","dateFinished":"2017-02-18T15:29:26-0800","dateStarted":"2017-02-18T15:29:24-0800","errorMessage":""},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1487460208723_335618455","id":"20170218-152328_161554363","dateCreated":"2017-02-18T15:23:28-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:21196","text":"%md Let's see how cached data appears in the execution UI","dateUpdated":"2017-02-18T15:23:59-0800","dateFinished":"2017-02-18T15:23:59-0800","dateStarted":"2017-02-18T15:23:59-0800","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Let&rsquo;s see how cached data appears in the execution UI</p>\n</div>"}]}},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1487460234235_-594673738","id":"20170218-152354_2052147108","dateCreated":"2017-02-18T15:23:54-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:21296","text":"val wordPairsWithDuplicates = smallPages.map(w => (w, 1)).cache\nwordPairsWithDuplicates.count","dateUpdated":"2017-02-18T15:25:15-0800","dateFinished":"2017-02-18T15:25:15-0800","dateStarted":"2017-02-18T15:25:15-0800","errorMessage":""},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1487460315371_119175034","id":"20170218-152515_524061505","dateCreated":"2017-02-18T15:25:15-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:21365","text":"wordPairsWithDuplicates.reduceByKey(_ + _).collect","dateUpdated":"2017-02-18T15:25:35-0800","dateFinished":"2017-02-18T15:25:35-0800","dateStarted":"2017-02-18T15:25:35-0800","errorMessage":""},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1487460335206_-1739916327","id":"20170218-152535_1626043615","dateCreated":"2017-02-18T15:25:35-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:21446","text":"%md Take a look in the UI and look at the green dot in the DAG visualization, representing the cached RDD `wordPairsWithDuplicates`","dateUpdated":"2017-02-18T15:26:34-0800","dateFinished":"2017-02-18T15:26:34-0800","dateStarted":"2017-02-18T15:26:34-0800","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Take a look in the UI and look at the green dot in the DAG visualization, representing the cached RDD <code>wordPairsWithDuplicates</code></p>\n</div>"}]}},{"text":"%md What if we've performed a shuffle with a data set, and we need the output of that shuffle again?\n\nSpark will re-use the existing shuffle output files -- this results in skipped stages.","user":"anonymous","dateUpdated":"2017-02-18T15:30:07-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1487460394452_142918908","id":"20170218-152634_586127695","dateCreated":"2017-02-18T15:26:34-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:21533","dateFinished":"2017-02-18T15:30:07-0800","dateStarted":"2017-02-18T15:30:07-0800","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>What if we&rsquo;ve performed a shuffle with a data set, and we need the output of that shuffle again?</p>\n<p>Spark will re-use the existing shuffle output files &ndash; this results in skipped stages.</p>\n</div>"}]}},{"text":"val aShuffledRDD = smallPages.map(w => (w, 1)).reduceByKey(_ + _)\naShuffledRDD.count","user":"anonymous","dateUpdated":"2017-02-18T15:31:07-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":true},"editorMode":"ace/mode/scala","editorHide":false,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1487460607881_583980709","id":"20170218-153007_548933044","dateCreated":"2017-02-18T15:30:07-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:21821","dateFinished":"2017-02-18T15:31:05-0800","dateStarted":"2017-02-18T15:31:03-0800","errorMessage":""},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1487460655192_2030292340","id":"20170218-153055_2110154167","dateCreated":"2017-02-18T15:30:55-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:21898","text":"aShuffledRDD.collect","dateUpdated":"2017-02-18T15:31:13-0800","dateFinished":"2017-02-18T15:31:13-0800","dateStarted":"2017-02-18T15:31:13-0800","errorMessage":""},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1487460673320_-464788953","id":"20170218-153113_1426673163","dateCreated":"2017-02-18T15:31:13-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:22046","text":"%md If we need to perform a full sort, this involved a range partitioning, and so will generate an additional Spark job.","dateUpdated":"2017-02-18T15:31:52-0800","dateFinished":"2017-02-18T15:31:52-0800","dateStarted":"2017-02-18T15:31:52-0800","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>If we need to perform a full sort, this involved a range partitioning, and so will generate an additional Spark job.</p>\n</div>"}]}},{"text":"smallPages.map(w => (w, 1)).reduceByKey(_ + _).sortBy(word => -word._2).collect","user":"anonymous","dateUpdated":"2017-02-18T15:33:34-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":true},"editorMode":"ace/mode/scala","editorHide":false,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1487460712151_1013278404","id":"20170218-153152_885908470","dateCreated":"2017-02-18T15:31:52-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:22145","dateFinished":"2017-02-18T15:33:18-0800","dateStarted":"2017-02-18T15:33:17-0800","errorMessage":""},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1487460731902_-950834083","id":"20170218-153211_2078169979","dateCreated":"2017-02-18T15:32:11-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:22219","text":"%md #### How Does the Shuffle Work?\n\n* Hash shuffle\n* Sort shuffle\n* \"Tungsten-Sort\"","dateUpdated":"2017-02-18T15:35:09-0800","dateFinished":"2017-02-18T15:35:09-0800","dateStarted":"2017-02-18T15:35:09-0800","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>How Does the Shuffle Work?</h4>\n<ul>\n  <li>Hash shuffle</li>\n  <li>Sort shuffle</li>\n  <li>&ldquo;Tungsten-Sort&rdquo;</li>\n</ul>\n</div>"}]}},{"text":"%md \n\n##### Hash Shuffle\n\n<img src=\"http://i.imgur.com/chPvcqX.png\"/>","user":"anonymous","dateUpdated":"2017-02-18T15:33:56-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1487460826826_-1280240438","id":"20170218-153346_743694898","dateCreated":"2017-02-18T15:33:46-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:22364","dateFinished":"2017-02-18T15:33:56-0800","dateStarted":"2017-02-18T15:33:56-0800","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h5>Hash Shuffle</h5>\n<img src=\"http://i.imgur.com/chPvcqX.png\"/>\n</div>"}]}},{"text":"%md ##### Sort Shuffle\n\n<img src=\"http://i.imgur.com/Welxbtq.png\" width=\"800\"/>","user":"anonymous","dateUpdated":"2017-02-18T15:34:08-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1487460836778_2135037631","id":"20170218-153356_600904597","dateCreated":"2017-02-18T15:33:56-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:22438","dateFinished":"2017-02-18T15:34:08-0800","dateStarted":"2017-02-18T15:34:08-0800","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h5>Sort Shuffle</h5>\n<img src=\"http://i.imgur.com/Welxbtq.png\" width=\"800\"/>\n</div>"}]}},{"text":"%md\n","user":"anonymous","dateUpdated":"2017-02-18T15:34:08-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1487460848418_709927705","id":"20170218-153408_1411257291","dateCreated":"2017-02-18T15:34:08-0800","status":"READY","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:22512"}],"name":"RDD-Mem-Execution","id":"2C9QHDEEY","angularObjects":{"2CAVTNYXD:shared_process":[],"2C7K2429Q:shared_process":[],"2C8SPPQZU:shared_process":[],"2C7UX75H1:shared_process":[],"2C8CZHBMK:shared_process":[],"2C8M1YA6S:shared_process":[],"2C8HBGBZH:shared_process":[],"2C8W1YSQF:shared_process":[],"2CA11FFZW:shared_process":[],"2C8GTCYUP:shared_process":[],"2C7JSZ74W:shared_process":[],"2C7NXAQD7:shared_process":[],"2C8BUSWZY:shared_process":[],"2C8BMRSH6:shared_process":[],"2CAD4S1XP:shared_process":[],"2C8DQ16J7:shared_process":[],"2C9YA18WV:shared_process":[],"2CA315FYH:shared_process":[],"2C915WF4P:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}