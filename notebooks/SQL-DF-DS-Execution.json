{"paragraphs":[{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1487461493903_2013559314","id":"20170218-154453_2108850861","dateCreated":"2017-02-18T15:44:53-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:29534","text":"%md ## SQL, DataFrame, and Dataset\n### Catalyst, Tungsten, and Modern Spark Execution\n\n&copy;2016, 2017 by Adam Breindel. All Rights Reserved.","dateUpdated":"2017-02-18T15:45:27-0800","dateFinished":"2017-02-18T15:45:27-0800","dateStarted":"2017-02-18T15:45:27-0800","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>SQL, DataFrame, and Dataset</h2>\n<h3>Catalyst, Tungsten, and Modern Spark Execution</h3>\n<p>&copy;2016, 2017 by Adam Breindel. All Rights Reserved.</p>\n</div>"}]}},{"text":"%md Let's take the list of page title words, and write it out to disk so we can easily play with it.\n","user":"anonymous","dateUpdated":"2017-02-18T15:53:54-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1487461527443_-2091680802","id":"20170218-154527_1517181149","dateCreated":"2017-02-18T15:45:27-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:29594","dateFinished":"2017-02-18T15:53:54-0800","dateStarted":"2017-02-18T15:53:54-0800","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Let&rsquo;s take the list of page title words, and write it out to disk so we can easily play with it.</p>\n</div>"}]}},{"text":"val titles = spark.read.option(\"delimiter\", \" \").csv(\"data/pageviews-20170120-180000\").filter(\"_c0 = 'en' AND _c1 >= 'A'\").select(\"_c1\")\ntitles.show","user":"anonymous","dateUpdated":"2017-02-18T15:49:11-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":true},"editorMode":"ace/mode/scala","editorHide":false,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1487461604377_117855511","id":"20170218-154644_1372034880","dateCreated":"2017-02-18T15:46:44-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:29669","dateFinished":"2017-02-18T15:49:08-0800","dateStarted":"2017-02-18T15:49:06-0800","errorMessage":""},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1487461668127_-1127283875","id":"20170218-154748_1907974241","dateCreated":"2017-02-18T15:47:48-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:29743","text":"titles.as[String].flatMap(_.split(\"_\")).write.parquet(\"data/enTitleWords\")","dateUpdated":"2017-02-18T15:50:09-0800","dateFinished":"2017-02-18T15:50:14-0800","dateStarted":"2017-02-18T15:50:09-0800","results":{"code":"SUCCESS","msg":[]}},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1487461769789_-2140788575","id":"20170218-154929_95398356","dateCreated":"2017-02-18T15:49:29-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:30012","text":"%md Ok, let's start with a simple query, and take a look at the execution pattern","dateUpdated":"2017-02-18T15:50:38-0800","dateFinished":"2017-02-18T15:50:38-0800","dateStarted":"2017-02-18T15:50:38-0800","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Ok, let&rsquo;s start with a simple query, and take a look at the execution pattern</p>\n</div>"}]}},{"text":"spark.read.parquet(\"data/enTitleWords\").count\n","user":"anonymous","dateUpdated":"2017-02-18T15:50:56-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":true},"editorMode":"ace/mode/scala","editorHide":false,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1487461838861_-916609520","id":"20170218-155038_1583110915","dateCreated":"2017-02-18T15:50:38-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:30108","dateFinished":"2017-02-18T15:50:53-0800","dateStarted":"2017-02-18T15:50:53-0800","errorMessage":""},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1487461853045_-726512915","id":"20170218-155053_8839942","dateCreated":"2017-02-18T15:50:53-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:30182","text":"%md Why are there 2 stages there? (Recall that counting an RDD was just one stage and an output)\n\nhttps://github.com/apache/spark/blob/master/sql/core/src/main/scala/org/apache/spark/sql/Dataset.scala\n\n`count` is implemented as a \"regular\" aggregation, in this case with as `data.groupBy().count()`, with the actual result extracted for convenience\n\nIn other words, each partition is counted, then the counts are merged.","dateUpdated":"2017-02-18T15:52:48-0800","dateFinished":"2017-02-18T15:52:48-0800","dateStarted":"2017-02-18T15:52:48-0800","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Why are there 2 stages there? (Recall that counting an RDD was just one stage and an output)</p>\n<p><a href=\"https://github.com/apache/spark/blob/master/sql/core/src/main/scala/org/apache/spark/sql/Dataset.scala\">https://github.com/apache/spark/blob/master/sql/core/src/main/scala/org/apache/spark/sql/Dataset.scala</a></p>\n<p><code>count</code> is implemented as a &ldquo;regular&rdquo; aggregation, in this case with as <code>data.groupBy().count()</code>, with the actual result extracted for convenience</p>\n<p>In other words, each partition is counted, then the counts are merged.</p>\n</div>"}]}},{"text":"%md Doing our word count with our Dataset, let's look at the UI and understand the high-level execution: Jobs and Stages","user":"anonymous","dateUpdated":"2017-02-18T16:12:19-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1487461968738_1495163507","id":"20170218-155248_1504890380","dateCreated":"2017-02-18T15:52:48-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:30283","dateFinished":"2017-02-18T16:12:19-0800","dateStarted":"2017-02-18T16:12:19-0800","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Doing our word count with our Dataset, let&rsquo;s look at the UI and understand the high-level execution: Jobs and Stages</p>\n</div>"}]}},{"text":"spark.read.parquet(\"data/enTitleWords\").groupBy('value).count.collect","user":"anonymous","dateUpdated":"2017-02-18T15:54:46-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":false,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1487461980193_41197414","id":"20170218-155300_731889392","dateCreated":"2017-02-18T15:53:00-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:30357","dateFinished":"2017-02-18T15:53:37-0800","dateStarted":"2017-02-18T15:53:33-0800","errorMessage":""},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1487462065897_-17715141","id":"20170218-155425_1570043783","dateCreated":"2017-02-18T15:54:25-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:30545","text":"%md As with RDDs, adding narrow operations doesn't change the number of stages/tasks:","dateUpdated":"2017-02-18T15:54:42-0800","dateFinished":"2017-02-18T15:54:42-0800","dateStarted":"2017-02-18T15:54:42-0800","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>As with RDDs, adding narrow operations doesn&rsquo;t change the number of stages/tasks:</p>\n</div>"}]}},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1487462013920_-864639415","id":"20170218-155333_677018840","dateCreated":"2017-02-18T15:53:33-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:30437","text":"spark.read.parquet(\"data/enTitleWords\").sample(false, 0.1, 42).groupBy('value).count().collect\n","dateUpdated":"2017-02-18T15:55:01-0800","dateFinished":"2017-02-18T15:55:02-0800","dateStarted":"2017-02-18T15:55:01-0800","errorMessage":""},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1487462101036_1291062700","id":"20170218-155501_699431991","dateCreated":"2017-02-18T15:55:01-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:30625","text":"%md And sorting will require an extra job with a non-deterministic number of tasks (for the RangePartition)","dateUpdated":"2017-02-18T15:56:13-0800","dateFinished":"2017-02-18T15:56:13-0800","dateStarted":"2017-02-18T15:56:13-0800","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>And sorting will require an extra job with a non-deterministic number of tasks (for the RangePartition)</p>\n</div>"}]}},{"text":"spark.read.parquet(\"data/enTitleWords\").sample(false, 0.1, 42).groupBy('value).count().orderBy('count desc).collect","user":"anonymous","dateUpdated":"2017-02-18T15:56:37-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":false,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1487462173855_765419081","id":"20170218-155613_1618479922","dateCreated":"2017-02-18T15:56:13-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:30709","dateFinished":"2017-02-18T15:56:32-0800","dateStarted":"2017-02-18T15:56:29-0800","errorMessage":""},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1487462189686_-1129069178","id":"20170218-155629_1418402288","dateCreated":"2017-02-18T15:56:29-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:30783","text":"%md\n\n#### Spark DataFrame/Dataset Execution Pipeline\n\n<img src=\"http://i.imgur.com/gRn5y6H.png\" width=\"1000\"/>","dateUpdated":"2017-02-18T15:57:02-0800","dateFinished":"2017-02-18T15:57:02-0800","dateStarted":"2017-02-18T15:57:02-0800","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>Spark DataFrame/Dataset Execution Pipeline</h4>\n<img src=\"http://i.imgur.com/gRn5y6H.png\" width=\"1000\"/>\n</div>"}]}},{"text":"%md Ok, how can we ask for -- and understand -- the query plan?","user":"anonymous","dateUpdated":"2017-02-18T15:57:26-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1487462222771_-1643665637","id":"20170218-155702_1359280060","dateCreated":"2017-02-18T15:57:02-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:30880","dateFinished":"2017-02-18T15:57:26-0800","dateStarted":"2017-02-18T15:57:26-0800","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Ok, how can we ask for &ndash; and understand &ndash; the query plan?</p>\n</div>"}]}},{"text":"spark.read.parquet(\"data/enTitleWords\").sample(false, 0.1, 42).groupBy('value).count().orderBy('count desc).explain(true)","user":"anonymous","dateUpdated":"2017-02-18T15:57:51-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1487462246971_1634825713","id":"20170218-155726_1623265222","dateCreated":"2017-02-18T15:57:26-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:30954","dateFinished":"2017-02-18T15:57:51-0800","dateStarted":"2017-02-18T15:57:51-0800","errorMessage":""},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1487462271434_-13976565","id":"20170218-155751_1108045271","dateCreated":"2017-02-18T15:57:51-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:31028","text":"%md Great info, but a little hard to read. Let's look in the SQL UI!","dateUpdated":"2017-02-18T15:58:26-0800","dateFinished":"2017-02-18T15:58:26-0800","dateStarted":"2017-02-18T15:58:26-0800","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Great info, but a little hard to read. Let&rsquo;s look in the SQL UI!</p>\n</div>"}]}},{"text":"%md #### What does Catalyst Logical Optmizer do?\n(i.e., what is the difference between analyzed logical plan and optimized logical plan)\n\n__*Make a more performant plan that produces the same output*__\n\nHere is an example to discuss:\n\n<img src=\"http://i.imgur.com/0ikv6OA.png\"/>\n","user":"anonymous","dateUpdated":"2017-02-18T16:07:00-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1487462306057_1025660935","id":"20170218-155826_2049509830","dateCreated":"2017-02-18T15:58:26-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:31115","dateFinished":"2017-02-18T16:07:00-0800","dateStarted":"2017-02-18T16:07:00-0800","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>What does Catalyst Logical Optmizer do?</h4>\n<p>(i.e., what is the difference between analyzed logical plan and optimized logical plan)</p>\n<p><strong><em>Make a more performant plan that produces the same output</em></strong></p>\n<p>Here is an example to discuss:</p>\n<img src=\"http://i.imgur.com/0ikv6OA.png\"/>\n</div>"}]}},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1487462499800_1861410523","id":"20170218-160139_627008589","dateCreated":"2017-02-18T16:01:39-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:31191","text":"%md #### Demo/Exploration of 2 Simple Optimizations:\n* Combine filters\n* Push down predicate (filter), e.g., through most project operators","dateUpdated":"2017-02-18T16:07:30-0800","dateFinished":"2017-02-18T16:07:30-0800","dateStarted":"2017-02-18T16:07:30-0800","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>Demo/Exploration of 2 Simple Optimizations:</h4>\n<ul>\n  <li>Combine filters</li>\n  <li>Push down predicate (filter), e.g., through most project operators</li>\n</ul>\n</div>"}]}},{"text":"spark.read.parquet(\"data/enTitleWords\").filter('value > \"A\").filter('value < \"Z\").explain(true)","user":"anonymous","dateUpdated":"2017-02-18T16:08:11-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":true},"editorMode":"ace/mode/scala","editorHide":false,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1487462841260_-1932140824","id":"20170218-160721_1014174430","dateCreated":"2017-02-18T16:07:21-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:31459","dateFinished":"2017-02-18T16:07:58-0800","dateStarted":"2017-02-18T16:07:58-0800","errorMessage":""},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1487462878620_919126005","id":"20170218-160758_47290636","dateCreated":"2017-02-18T16:07:58-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:31568","text":"import org.apache.spark.sql.functions._\n\nspark.read.parquet(\"data/enTitleWords\").select('value, upper('value)).filter('value > \"A\").filter('value < \"Z\").explain(true)","dateUpdated":"2017-02-18T16:08:31-0800","dateFinished":"2017-02-18T16:08:31-0800","dateStarted":"2017-02-18T16:08:31-0800","errorMessage":""},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1487462911505_856073158","id":"20170218-160831_185662418","dateCreated":"2017-02-18T16:08:31-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:31665","text":"spark.read.parquet(\"data/enTitleWords\").filter('value > \"A\").select('value, upper('value)).filter('value < \"Z\").explain(true)","dateUpdated":"2017-02-18T16:08:59-0800","dateFinished":"2017-02-18T16:09:00-0800","dateStarted":"2017-02-18T16:09:00-0800","errorMessage":""},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1487462939984_727798533","id":"20170218-160859_1172863548","dateCreated":"2017-02-18T16:08:59-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:31749","text":"%md __If you want to take a closer look at the logical optimizer code and rules__\n\n* Operators\n    * https://github.com/apache/spark/blob/master/sql/catalyst/src/main/scala/org/apache/spark/sql/catalyst/plans/logical/basicLogicalOperators.scala\n* Expressions\n    * https://github.com/apache/spark/blob/master/sql/catalyst/src/main/scala/org/apache/spark/sql/catalyst/expressions/arithmetic.scala\n* Transformation rules\n    * https://github.com/apache/spark/blob/master/sql/catalyst/src/main/scala/org/apache/spark/sql/catalyst/optimizer/Optimizer.scala\n\nSpark 2.x even has a user-facing public (though experimental) API for writing our own optimizations and dynamically adding them: http://blog.madhukaraphatak.com/introduction-to-spark-two-part-6/","dateUpdated":"2017-02-18T16:09:46-0800","dateFinished":"2017-02-18T16:09:46-0800","dateStarted":"2017-02-18T16:09:46-0800","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p><strong>If you want to take a closer look at the logical optimizer code and rules</strong></p>\n<ul>\n  <li>Operators\n    <ul>\n      <li><a href=\"https://github.com/apache/spark/blob/master/sql/catalyst/src/main/scala/org/apache/spark/sql/catalyst/plans/logical/basicLogicalOperators.scala\">https://github.com/apache/spark/blob/master/sql/catalyst/src/main/scala/org/apache/spark/sql/catalyst/plans/logical/basicLogicalOperators.scala</a></li>\n    </ul>\n  </li>\n  <li>Expressions\n    <ul>\n      <li><a href=\"https://github.com/apache/spark/blob/master/sql/catalyst/src/main/scala/org/apache/spark/sql/catalyst/expressions/arithmetic.scala\">https://github.com/apache/spark/blob/master/sql/catalyst/src/main/scala/org/apache/spark/sql/catalyst/expressions/arithmetic.scala</a></li>\n    </ul>\n  </li>\n  <li>Transformation rules\n    <ul>\n      <li><a href=\"https://github.com/apache/spark/blob/master/sql/catalyst/src/main/scala/org/apache/spark/sql/catalyst/optimizer/Optimizer.scala\">https://github.com/apache/spark/blob/master/sql/catalyst/src/main/scala/org/apache/spark/sql/catalyst/optimizer/Optimizer.scala</a></li>\n    </ul>\n  </li>\n</ul>\n<p>Spark 2.x even has a user-facing public (though experimental) API for writing our own optimizations and dynamically adding them: <a href=\"http://blog.madhukaraphatak.com/introduction-to-spark-two-part-6/\">http://blog.madhukaraphatak.com/introduction-to-spark-two-part-6/</a></p>\n</div>"}]}},{"text":"%md #### Physical Planning and Execution\n\n* Physical planner\n* Physical (SparkPlan) Optimizer\n* Code Generation","user":"anonymous","dateUpdated":"2017-02-18T16:10:28-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1487462965430_-1002371299","id":"20170218-160925_1694435055","dateCreated":"2017-02-18T16:09:25-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:31831","dateFinished":"2017-02-18T16:10:28-0800","dateStarted":"2017-02-18T16:10:28-0800","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>Physical Planning and Execution</h4>\n<ul>\n  <li>Physical planner</li>\n  <li>Physical (SparkPlan) Optimizer</li>\n  <li>Code Generation</li>\n</ul>\n</div>"}]}},{"text":"%md <img src=\"http://i.imgur.com/zMGUCg5.png\" width=\"800\"/>\n<br/>\n<br/>\n__Additional optimizations...__\n\nWhat if the parquet file is partitioned by age? (or we're reading from a database with key columns and/or indices?)","user":"anonymous","dateUpdated":"2017-02-18T16:10:14-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1487462997325_-837131775","id":"20170218-160957_1575272477","dateCreated":"2017-02-18T16:09:57-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:31923","dateFinished":"2017-02-18T16:10:14-0800","dateStarted":"2017-02-18T16:10:14-0800","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<img src=\"http://i.imgur.com/zMGUCg5.png\" width=\"800\"/>\n<br/>\n<br/>\n<p><strong>Additional optimizations&hellip;</strong></p>\n<p>What if the parquet file is partitioned by age? (or we&rsquo;re reading from a database with key columns and/or indices?)</p>\n</div>"}]}},{"text":"%md Why Whole-Stage Codegen?\n\n* Iterator/Volcano Model\n* Codegen'ed Operators vs. Interpreted Queries\n* Purpose-Built Code vs. General Framework (Freshman Paradox)\n    * Avoid virtual calls, page faults, leverage cache etc.","user":"anonymous","dateUpdated":"2017-02-18T16:13:40-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1487463014132_1200144300","id":"20170218-161014_1685219149","dateCreated":"2017-02-18T16:10:14-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:32015","dateFinished":"2017-02-18T16:13:40-0800","dateStarted":"2017-02-18T16:13:40-0800","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Why Whole-Stage Codegen?</p>\n<ul>\n  <li>Iterator/Volcano Model</li>\n  <li>Codegen&rsquo;ed Operators vs. Interpreted Queries</li>\n  <li>Purpose-Built Code vs. General Framework (Freshman Paradox)\n    <ul>\n      <li>Avoid virtual calls, page faults, leverage cache etc.</li>\n    </ul>\n  </li>\n</ul>\n</div>"}]}},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1487463033284_-545815561","id":"20170218-161033_714671021","dateCreated":"2017-02-18T16:10:33-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:32106","text":"import org.apache.spark.sql.execution.debug._\n\nspark.range(10).select('id * 2).debugCodegen","dateUpdated":"2017-02-18T16:11:16-0800","dateFinished":"2017-02-18T16:11:16-0800","dateStarted":"2017-02-18T16:11:16-0800","errorMessage":""},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1487463055761_1017666052","id":"20170218-161055_960553788","dateCreated":"2017-02-18T16:10:55-0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:32203","text":"%md If you really want to dig in, look at the codegen design doc, framework, and basic physical operators...\n\nFilter is a good one to start with! look for `case class FilterExec`\n\nhttps://github.com/apache/spark/blob/master/sql/core/src/main/scala/org/apache/spark/sql/execution/basicPhysicalOperators.scala\n\nHINTS:\n\n1. IntelliJ has great, free Scala support and \"Go To Declaration...\" will help you learn your way around the code\n2. Building Spark in IntelliJ can be tricky, but if you build the repo using its own build script (easier), you can attach IntelliJ to the process via remote debugging.\n    * To enable remote debugging on the driver, `export SPARK_JAVA_OPTS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005`","dateUpdated":"2017-02-18T16:28:02-0800","dateFinished":"2017-02-18T16:28:02-0800","dateStarted":"2017-02-18T16:28:02-0800","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>If you really want to dig in, look at the codegen design doc, framework, and basic physical operators&hellip;</p>\n<p>Filter is a good one to start with! look for <code>case class FilterExec</code></p>\n<p><a href=\"https://github.com/apache/spark/blob/master/sql/core/src/main/scala/org/apache/spark/sql/execution/basicPhysicalOperators.scala\">https://github.com/apache/spark/blob/master/sql/core/src/main/scala/org/apache/spark/sql/execution/basicPhysicalOperators.scala</a></p>\n<p>HINTS:</p>\n<ol>\n  <li>IntelliJ has great, free Scala support and &ldquo;Go To Declaration&hellip;&rdquo; will help you learn your way around the code</li>\n  <li>Building Spark in IntelliJ can be tricky, but if you build the repo using its own build script (easier), you can attach IntelliJ to the process via remote debugging.\n    <ul>\n      <li>To enable remote debugging on the driver, <code>export SPARK_JAVA_OPTS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005</code></li>\n    </ul>\n  </li>\n</ol>\n</div>"}]}},{"text":"%md\n","user":"anonymous","dateUpdated":"2017-02-18T16:18:16-0800","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1487463496934_1080994734","id":"20170218-161816_1413843304","dateCreated":"2017-02-18T16:18:16-0800","status":"READY","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:32414"}],"name":"SQL-DF-DS-Execution","id":"2C9SRQV8G","angularObjects":{"2CAVTNYXD:shared_process":[],"2C7K2429Q:shared_process":[],"2C8SPPQZU:shared_process":[],"2C7UX75H1:shared_process":[],"2C8CZHBMK:shared_process":[],"2C8M1YA6S:shared_process":[],"2C8HBGBZH:shared_process":[],"2C8W1YSQF:shared_process":[],"2CA11FFZW:shared_process":[],"2C8GTCYUP:shared_process":[],"2C7JSZ74W:shared_process":[],"2C7NXAQD7:shared_process":[],"2C8BUSWZY:shared_process":[],"2C8BMRSH6:shared_process":[],"2CAD4S1XP:shared_process":[],"2C8DQ16J7:shared_process":[],"2C9YA18WV:shared_process":[],"2CA315FYH:shared_process":[],"2C915WF4P:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}